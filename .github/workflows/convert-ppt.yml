name: Convert PowerPoint to PDF and Images

on:
  push:
    paths:
      - 'source/*.pptx'
      - 'source/*.ppt'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: List files for debugging
      run: |
        echo "=== Current directory ==="
        ls -la
        echo "=== Source directory ==="
        ls -la source/ 2>/dev/null || echo "source directory not found"
        
    - name: Install LibreOffice and ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y libreoffice imagemagick
        
    - name: Configure ImageMagick for PDF
      run: |
        sudo sed -i 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/g' /etc/ImageMagick-6/policy.xml
        
    - name: Convert PowerPoint to PDF
      run: |
        mkdir -p output
        
        # Check if source directory exists
        if [ ! -d "source" ]; then
          echo "Error: source directory does not exist!"
          echo "Please create source/ directory and upload PowerPoint files"
          exit 1
        fi
        
        # Convert PowerPoint files
        found_files=false
        for file in source/*.pptx source/*.ppt; do
          if [ -f "$file" ]; then
            echo "Converting: $file"
            libreoffice --headless --convert-to pdf --outdir output "$file"
            found_files=true
          fi
        done
        
        if [ "$found_files" = false ]; then
          echo "No PowerPoint files found in source directory"
          echo "Contents of source/:"
          ls -la source/
          exit 1
        fi
        
        echo "=== Generated PDF files ==="
        ls -la output/
        
    - name: Convert PDF to images
      run: |
        mkdir -p output/slides
        
        for pdf in output/*.pdf; do
          if [ -f "$pdf" ]; then
            echo "Converting PDF to images: $pdf"
            filename=$(basename "$pdf" .pdf)
            
            # Convert with error handling
            if convert -density 150 -quality 90 "$pdf" "output/slides/${filename}-%02d.png"; then
              echo "Successfully converted $pdf to images"
            else
              echo "Failed to convert $pdf to images"
            fi
          fi
        done
        
        echo "=== Generated image files ==="
        ls -la output/slides/ 2>/dev/null || echo "No slides directory created"
        
    - name: Create simple HTML viewer
      run: |
        mkdir -p docs
        
        # Copy output files to docs (only if output exists)
        if [ -d "output" ]; then
          cp -r output docs/
          echo "Copied output to docs/"
        else
          echo "No output directory found - creating empty structure"
          mkdir -p docs/output/slides
        fi
        
        # Create simple HTML viewer
        cat > docs/index.html << 'EOF'
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SlideShare風ビューアー</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px 0;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            text-align: center;
        }
        .logo { font-size: 28px; font-weight: bold; color: #667eea; }
        .container { max-width: 1200px; margin: 0 auto; padding: 40px 20px; }
        .presentation-card {
            background: white;
            border-radius: 16px;
            margin-bottom: 40px;
            overflow: hidden;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        }
        .presentation-header {
            padding: 30px;
            border-bottom: 1px solid #f0f0f0;
            background: linear-gradient(45deg, #f8f9fa, #ffffff);
        }
        .presentation-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 15px;
            color: #2c3e50;
        }
        .download-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            display: inline-block;
            margin-top: 10px;
        }
        .download-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        .slides-container {
            padding: 30px;
        }
        .slide-viewer {
            text-align: center;
            margin-bottom: 30px;
        }
        .slide-image {
            max-width: 100%;
            max-height: 600px;
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 20px;
        }
        .slide-navigation {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 30px;
        }
        .nav-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
        }
        .nav-btn:hover { background: #5a6fd8; }
        .nav-btn:disabled { background: #ccc; cursor: not-allowed; }
        .slide-counter {
            text-align: center;
            color: #666;
            margin-bottom: 20px;
            font-size: 16px;
        }
        .thumbnail-strip {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding: 20px 0;
            justify-content: center;
        }
        .thumbnail {
            flex-shrink: 0;
            width: 100px;
            height: 75px;
            border-radius: 6px;
            overflow: hidden;
            cursor: pointer;
            border: 3px solid transparent;
            transition: all 0.3s ease;
        }
        .thumbnail:hover { border-color: #667eea; }
        .thumbnail.active { border-color: #667eea; }
        .thumbnail img { width: 100%; height: 100%; object-fit: cover; }
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 20px;
            margin: 20px;
            border-radius: 8px;
            text-align: center;
        }
        @media (max-width: 768px) {
            .slide-navigation { flex-direction: column; align-items: center; }
            .thumbnail { width: 80px; height: 60px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="logo">📊 SlideViewer</div>
            <p>PowerPoint → PDF → スライド画像 自動変換</p>
        </div>
    </div>
    
    <div class="container">
        <div id="presentations"></div>
    </div>

    <script>
        // プレゼンテーションデータ
        const presentations = [];
        
EOF

        # プレゼンテーションデータを生成
        if [ -d "docs/output" ] && [ "$(ls -A docs/output/*.pdf 2>/dev/null)" ]; then
          for pdf in docs/output/*.pdf; do
            if [ -f "$pdf" ]; then
              filename=$(basename "$pdf" .pdf)
              echo "        presentations.push({" >> docs/index.html
              echo "            name: '$filename'," >> docs/index.html
              echo "            pdfUrl: 'output/${filename}.pdf'," >> docs/index.html
              echo -n "            slides: [" >> docs/index.html
              
              # スライド画像のリストを作成
              first=true
              if [ -d "docs/output/slides" ]; then
                for img in docs/output/slides/${filename}-*.png; do
                  if [ -f "$img" ]; then
                    imgname=$(basename "$img")
                    if [ "$first" = true ]; then
                      first=false
                    else
                      echo -n "," >> docs/index.html
                    fi
                    echo -n "'output/slides/$imgname'" >> docs/index.html
                  fi
                done
              fi
              echo "]" >> docs/index.html
              echo "        });" >> docs/index.html
            fi
          done
        else
          echo "        // No presentations found" >> docs/index.html
        fi

        # JavaScriptの続きを追加
        cat >> docs/index.html << 'EOF'

        // ビューアークラス
        class SimpleSlideViewer {
            constructor(container, slides, title, pdfUrl) {
                this.container = container;
                this.slides = slides;
                this.title = title;
                this.pdfUrl = pdfUrl;
                this.currentSlide = 0;
                this.render();
            }

            render() {
                const slideCount = this.slides.length;
                
                if (slideCount === 0) {
                    this.container.innerHTML = `
                        <div class="error-message">
                            <h3>⚠️ スライド画像が見つかりません</h3>
                            <p>PDF変換は成功していますが、画像変換でエラーが発生した可能性があります。</p>
                            <a href="${this.pdfUrl}" class="download-btn">📄 PDF版をダウンロード</a>
                        </div>
                    `;
                    return;
                }

                this.container.innerHTML = `
                    <div class="presentation-header">
                        <h2 class="presentation-title">${this.title}</h2>
                        <div>📊 ${slideCount} スライド | 📅 ${new Date().toLocaleDateString('ja-JP')}</div>
                        <a href="${this.pdfUrl}" class="download-btn" download>📄 PDF ダウンロード</a>
                    </div>
                    <div class="slides-container">
                        <div class="slide-counter">スライド ${this.currentSlide + 1} / ${slideCount}</div>
                        <div class="slide-viewer">
                            <img class="slide-image" src="${this.slides[this.currentSlide]}" alt="Slide ${this.currentSlide + 1}">
                        </div>
                        <div class="slide-navigation">
                            <button class="nav-btn" onclick="viewers[${viewers.length}].previousSlide()" ${this.currentSlide === 0 ? 'disabled' : ''}>← 前へ</button>
                            <button class="nav-btn" onclick="viewers[${viewers.length}].nextSlide()" ${this.currentSlide >= slideCount - 1 ? 'disabled' : ''}>次へ →</button>
                        </div>
                        <div class="thumbnail-strip">
                            ${this.slides.map((slide, index) => `
                                <div class="thumbnail ${index === this.currentSlide ? 'active' : ''}" onclick="viewers[${viewers.length}].goToSlide(${index})">
                                    <img src="${slide}" alt="Slide ${index + 1}">
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }

            nextSlide() {
                if (this.currentSlide < this.slides.length - 1) {
                    this.currentSlide++;
                    this.render();
                }
            }

            previousSlide() {
                if (this.currentSlide > 0) {
                    this.currentSlide--;
                    this.render();
                }
            }

            goToSlide(index) {
                if (index >= 0 && index < this.slides.length) {
                    this.currentSlide = index;
                    this.render();
                }
            }
        }

        // グローバルビューアー配列
        const viewers = [];

        // プレゼンテーション表示
        const container = document.getElementById('presentations');
        
        if (presentations.length === 0) {
            container.innerHTML = `
                <div class="presentation-card">
                    <div class="error-message">
                        <h3>⚠️ プレゼンテーションが見つかりません</h3>
                        <p>以下をご確認ください：</p>
                        <ul style="text-align: left; margin: 15px 0;">
                            <li>source/ フォルダにPowerPointファイル(.pptx)をアップロードしましたか？</li>
                            <li>GitHub Actionsは正常に実行されましたか？</li>
                            <li>ファイル名に特殊文字は含まれていませんか？</li>
                        </ul>
                        <p><strong>確認方法：</strong> リポジトリのActionsタブで最新の実行結果を確認してください。</p>
                    </div>
                </div>
            `;
        } else {
            presentations.forEach((presentation, index) => {
                const div = document.createElement('div');
                div.className = 'presentation-card';
                container.appendChild(div);
                
                const viewer = new SimpleSlideViewer(div, presentation.slides, presentation.name, presentation.pdfUrl);
                viewers.push(viewer);
            });
        }

        // キーボードナビゲーション
        document.addEventListener('keydown', (e) => {
            if (viewers.length > 0) {
                const viewer = viewers[0]; // 最初のプレゼンテーション
                if (e.key === 'ArrowLeft') viewer.previousSlide();
                if (e.key === 'ArrowRight') viewer.nextSlide();
            }
        });
    </script>
</body>
</html>
EOF

        echo "=== Generated HTML viewer ==="
        ls -la docs/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "🔄 Auto-convert slides $(date '+%Y-%m-%d %H:%M:%S')" || exit 0
        git push
